
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ACR_NAME: showcaseacrbm123 # OBAVEZNO: Zamijenite s imenom vašeg ACR-a
  RESOURCE_GROUP: AzureShowcase-RG
  AKS_CLUSTER_NAME: showcase-aks-cluster

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and push OrderService
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/orderservice:${{ github.sha }} -f ./src/OrderService/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/orderservice:${{ github.sha }}
          
      - name: Build and push InventoryService
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/inventoryservice:${{ github.sha }} -f ./src/InventoryService/Dockerfile .
          docker push ${{ env.ACR_NAME }}.azurecr.io/inventoryservice:${{ github.sha }}

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Replace placeholders in Kubernetes manifests
        run: |
          sed -i 's|__ACR_NAME__|${{ env.ACR_NAME }}|g' ./k8s/deployment.yml
          sed -i 's|__IMAGE_TAG__|${{ github.sha }}|g' ./k8s/deployment.yml
          sed -i 's|__ACR_NAME__|${{ env.ACR_NAME }}|g' ./k8s/inventory-deployment.yml
          sed -i 's|__IMAGE_TAG__|${{ github.sha }}|g' ./k8s/inventory-deployment.yml

      - name: Deploy to AKS
        run: |
          # FINALNI ISPRAVAK: Prvo preuzimamo CRD, a zatim ga primjenjujemo
          echo "Preuzimam potrebne CRD-ove za Secret Store..."
          curl -sSL -o secretproviderclasses.yaml "https://raw.githubusercontent.com/Azure/secrets-store-csi-driver-provider-azure/main/charts/csi-secrets-store-provider-azure/crds/csi.secrets-store.k8s.io_secretproviderclasses.yaml"
          
          echo "Primjenjujem CRD..."
          kubectl apply -f secretproviderclasses.yaml
          
          # Čekamo da se CRD "ustabili" u klasteru
          kubectl wait --for=condition=established --timeout=60s crd/secretproviderclasses.secrets-store.csi.x-k8s.io
          
          echo "CRD je spreman. Primjenjujem ostatak manifesta..."

          # Sada primjenjujemo SVE naše manifest datoteke
          kubectl apply -f ./k8s/